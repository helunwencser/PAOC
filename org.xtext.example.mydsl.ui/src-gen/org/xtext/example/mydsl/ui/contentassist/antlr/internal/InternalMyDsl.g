/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomainModel
entryRuleDomainModel 
:
{ before(grammarAccess.getDomainModelRule()); }
	 ruleDomainModel
{ after(grammarAccess.getDomainModelRule()); } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainModelAccess().getGroup()); }
(rule__DomainModel__Group__0)
{ after(grammarAccess.getDomainModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraintType
entryRuleConstraintType 
:
{ before(grammarAccess.getConstraintTypeRule()); }
	 ruleConstraintType
{ after(grammarAccess.getConstraintTypeRule()); } 
	 EOF 
;

// Rule ConstraintType
ruleConstraintType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintTypeAccess().getAlternatives()); }
(rule__ConstraintType__Alternatives)
{ after(grammarAccess.getConstraintTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefaultConstraint
entryRuleDefaultConstraint 
:
{ before(grammarAccess.getDefaultConstraintRule()); }
	 ruleDefaultConstraint
{ after(grammarAccess.getDefaultConstraintRule()); } 
	 EOF 
;

// Rule DefaultConstraint
ruleDefaultConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefaultConstraintAccess().getGroup()); }
(rule__DefaultConstraint__Group__0)
{ after(grammarAccess.getDefaultConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePersonalConstraint
entryRulePersonalConstraint 
:
{ before(grammarAccess.getPersonalConstraintRule()); }
	 rulePersonalConstraint
{ after(grammarAccess.getPersonalConstraintRule()); } 
	 EOF 
;

// Rule PersonalConstraint
rulePersonalConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPersonalConstraintAccess().getGroup()); }
(rule__PersonalConstraint__Group__0)
{ after(grammarAccess.getPersonalConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintAccess().getGroup()); }
(rule__Constraint__Group__0)
{ after(grammarAccess.getConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJudgeFun
entryRuleJudgeFun 
:
{ before(grammarAccess.getJudgeFunRule()); }
	 ruleJudgeFun
{ after(grammarAccess.getJudgeFunRule()); } 
	 EOF 
;

// Rule JudgeFun
ruleJudgeFun
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJudgeFunAccess().getAlternatives()); }
(rule__JudgeFun__Alternatives)
{ after(grammarAccess.getJudgeFunAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleThreshold
entryRuleThreshold 
:
{ before(grammarAccess.getThresholdRule()); }
	 ruleThreshold
{ after(grammarAccess.getThresholdRule()); } 
	 EOF 
;

// Rule Threshold
ruleThreshold
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThresholdAccess().getAlternatives()); }
(rule__Threshold__Alternatives)
{ after(grammarAccess.getThresholdAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloat
entryRuleFloat 
:
{ before(grammarAccess.getFloatRule()); }
	 ruleFloat
{ after(grammarAccess.getFloatRule()); } 
	 EOF 
;

// Rule Float
ruleFloat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatAccess().getGroup()); }
(rule__Float__Group__0)
{ after(grammarAccess.getFloatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ConstraintType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintTypeAccess().getDAssignment_0()); }
(rule__ConstraintType__DAssignment_0)
{ after(grammarAccess.getConstraintTypeAccess().getDAssignment_0()); }
)

    |(
{ before(grammarAccess.getConstraintTypeAccess().getPAssignment_1()); }
(rule__ConstraintType__PAssignment_1)
{ after(grammarAccess.getConstraintTypeAccess().getPAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JudgeFun__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJudgeFunAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getJudgeFunAccess().getLessThanSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getJudgeFunAccess().getGreaterThanSignKeyword_1()); }

	'>' 

{ after(grammarAccess.getJudgeFunAccess().getGreaterThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getJudgeFunAccess().getGroup_2()); }
(rule__JudgeFun__Group_2__0)
{ after(grammarAccess.getJudgeFunAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getJudgeFunAccess().getInRangeKeyword_3()); }

	'inRange' 

{ after(grammarAccess.getJudgeFunAccess().getInRangeKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JudgeFun__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJudgeFunAccess().getLessThanSignKeyword_2_0_0()); }

	'<' 

{ after(grammarAccess.getJudgeFunAccess().getLessThanSignKeyword_2_0_0()); }
)

    |(
{ before(grammarAccess.getJudgeFunAccess().getGreaterThanSignKeyword_2_0_1()); }

	'>' 

{ after(grammarAccess.getJudgeFunAccess().getGreaterThanSignKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThresholdAccess().getFloatParserRuleCall_0()); }
	ruleFloat
{ after(grammarAccess.getThresholdAccess().getFloatParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getThresholdAccess().getGroup_1()); }
(rule__Threshold__Group_1__0)
{ after(grammarAccess.getThresholdAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThresholdAccess().getLeftSquareBracketKeyword_1_0_0()); }

	'[' 

{ after(grammarAccess.getThresholdAccess().getLeftSquareBracketKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getThresholdAccess().getLeftParenthesisKeyword_1_0_1()); }

	'(' 

{ after(grammarAccess.getThresholdAccess().getLeftParenthesisKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Alternatives_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThresholdAccess().getRightParenthesisKeyword_1_4_0()); }

	')' 

{ after(grammarAccess.getThresholdAccess().getRightParenthesisKeyword_1_4_0()); }
)

    |(
{ before(grammarAccess.getThresholdAccess().getRightSquareBracketKeyword_1_4_1()); }

	']' 

{ after(grammarAccess.getThresholdAccess().getRightSquareBracketKeyword_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getFloatAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getFloatAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getFloatAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getGroup_1_0()); }
(rule__Float__Group_1_0__0)
{ after(grammarAccess.getFloatAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getFloatAccess().getGroup_1_1()); }
(rule__Float__Group_1_1__0)
{ after(grammarAccess.getFloatAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DomainModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModel__Group__0__Impl
	rule__DomainModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getDomainModelAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModel__Group__1__Impl
	rule__DomainModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getPackageNameAssignment_1()); }
(rule__DomainModel__PackageNameAssignment_1)
{ after(grammarAccess.getDomainModelAccess().getPackageNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModel__Group__2__Impl
	rule__DomainModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getDomainModelAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModel__Group__3__Impl
	rule__DomainModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getIjsdfKeyword_3()); }

	'ijsdf' 

{ after(grammarAccess.getDomainModelAccess().getIjsdfKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModel__Group__4__Impl
	rule__DomainModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getElementsAssignment_4()); }
(rule__DomainModel__ElementsAssignment_4)*
{ after(grammarAccess.getDomainModelAccess().getElementsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModel__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModel__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getDomainModelAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DefaultConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultConstraint__Group__0__Impl
	rule__DefaultConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultConstraintAccess().getActivityKeyword_0()); }

	'activity' 

{ after(grammarAccess.getDefaultConstraintAccess().getActivityKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultConstraint__Group__1__Impl
	rule__DefaultConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultConstraintAccess().getActivityNameAssignment_1()); }
(rule__DefaultConstraint__ActivityNameAssignment_1)
{ after(grammarAccess.getDefaultConstraintAccess().getActivityNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultConstraint__Group__2__Impl
	rule__DefaultConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultConstraintAccess().getConstraintKeyword_2()); }

	'constraint' 

{ after(grammarAccess.getDefaultConstraintAccess().getConstraintKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefaultConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefaultConstraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultConstraintAccess().getConstraintsAssignment_3()); }
(rule__DefaultConstraint__ConstraintsAssignment_3)*
{ after(grammarAccess.getDefaultConstraintAccess().getConstraintsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PersonalConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersonalConstraint__Group__0__Impl
	rule__PersonalConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getPersonKeyword_0()); }

	'person' 

{ after(grammarAccess.getPersonalConstraintAccess().getPersonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PersonalConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersonalConstraint__Group__1__Impl
	rule__PersonalConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getPersonNameAssignment_1()); }
(rule__PersonalConstraint__PersonNameAssignment_1)
{ after(grammarAccess.getPersonalConstraintAccess().getPersonNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PersonalConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersonalConstraint__Group__2__Impl
	rule__PersonalConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getActivityKeyword_2()); }

	'activity' 

{ after(grammarAccess.getPersonalConstraintAccess().getActivityKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PersonalConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersonalConstraint__Group__3__Impl
	rule__PersonalConstraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getActivityNameAssignment_3()); }
(rule__PersonalConstraint__ActivityNameAssignment_3)
{ after(grammarAccess.getPersonalConstraintAccess().getActivityNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PersonalConstraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersonalConstraint__Group__4__Impl
	rule__PersonalConstraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getConstraintKeyword_4()); }

	'constraint' 

{ after(grammarAccess.getPersonalConstraintAccess().getConstraintKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PersonalConstraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PersonalConstraint__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getConstraintsAssignment_5()); }
(rule__PersonalConstraint__ConstraintsAssignment_5)*
{ after(grammarAccess.getPersonalConstraintAccess().getConstraintsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Constraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getConstraintNameAssignment_0()); }
(rule__Constraint__ConstraintNameAssignment_0)
{ after(grammarAccess.getConstraintAccess().getConstraintNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getConstraintAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getFeatureNameAssignment_2()); }
(rule__Constraint__FeatureNameAssignment_2)
{ after(grammarAccess.getConstraintAccess().getFeatureNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__3__Impl
	rule__Constraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getConstraintAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__4__Impl
	rule__Constraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getJudgeFunAssignment_4()); }
(rule__Constraint__JudgeFunAssignment_4)
{ after(grammarAccess.getConstraintAccess().getJudgeFunAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__5__Impl
	rule__Constraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getConstraintAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getThresholdAssignment_6()); }
(rule__Constraint__ThresholdAssignment_6)
{ after(grammarAccess.getConstraintAccess().getThresholdAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JudgeFun__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JudgeFun__Group_2__0__Impl
	rule__JudgeFun__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JudgeFun__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJudgeFunAccess().getAlternatives_2_0()); }
(rule__JudgeFun__Alternatives_2_0)?
{ after(grammarAccess.getJudgeFunAccess().getAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JudgeFun__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JudgeFun__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JudgeFun__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJudgeFunAccess().getEqualsSignKeyword_2_1()); }

	'=' 

{ after(grammarAccess.getJudgeFunAccess().getEqualsSignKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Threshold__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Threshold__Group_1__0__Impl
	rule__Threshold__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThresholdAccess().getAlternatives_1_0()); }
(rule__Threshold__Alternatives_1_0)
{ after(grammarAccess.getThresholdAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Threshold__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Threshold__Group_1__1__Impl
	rule__Threshold__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThresholdAccess().getFloatParserRuleCall_1_1()); }
	ruleFloat
{ after(grammarAccess.getThresholdAccess().getFloatParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Threshold__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Threshold__Group_1__2__Impl
	rule__Threshold__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThresholdAccess().getCommaKeyword_1_2()); }

	',' 

{ after(grammarAccess.getThresholdAccess().getCommaKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Threshold__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Threshold__Group_1__3__Impl
	rule__Threshold__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThresholdAccess().getFloatParserRuleCall_1_3()); }
	ruleFloat
{ after(grammarAccess.getThresholdAccess().getFloatParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Threshold__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Threshold__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Threshold__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThresholdAccess().getAlternatives_1_4()); }
(rule__Threshold__Alternatives_1_4)
{ after(grammarAccess.getThresholdAccess().getAlternatives_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Float__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group__0__Impl
	rule__Float__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getAlternatives_0()); }
(rule__Float__Alternatives_0)?
{ after(grammarAccess.getFloatAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getAlternatives_1()); }
(rule__Float__Alternatives_1)
{ after(grammarAccess.getFloatAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Float__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_1_0__0__Impl
	rule__Float__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_0_0()); }
	RULE_INT
{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getGroup_1_0_1()); }
(rule__Float__Group_1_0_1__0)?
{ after(grammarAccess.getFloatAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Float__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_1_0_1__0__Impl
	rule__Float__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getFullStopKeyword_1_0_1_0()); }

	'.' 

{ after(grammarAccess.getFloatAccess().getFullStopKeyword_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_0_1_1()); }
	RULE_INT
{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Float__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_1_1__0__Impl
	rule__Float__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getFullStopKeyword_1_1_0()); }

	'.' 

{ after(grammarAccess.getFloatAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1_1()); }
	RULE_INT
{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DomainModel__PackageNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getPackageNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getDomainModelAccess().getPackageNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__ElementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getElementsConstraintTypeParserRuleCall_4_0()); }
	ruleConstraintType{ after(grammarAccess.getDomainModelAccess().getElementsConstraintTypeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintType__DAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintTypeAccess().getDDefaultConstraintParserRuleCall_0_0()); }
	ruleDefaultConstraint{ after(grammarAccess.getConstraintTypeAccess().getDDefaultConstraintParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintType__PAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintTypeAccess().getPPersonalConstraintParserRuleCall_1_0()); }
	rulePersonalConstraint{ after(grammarAccess.getConstraintTypeAccess().getPPersonalConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultConstraint__ActivityNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultConstraintAccess().getActivityNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDefaultConstraintAccess().getActivityNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefaultConstraint__ConstraintsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefaultConstraintAccess().getConstraintsConstraintParserRuleCall_3_0()); }
	ruleConstraint{ after(grammarAccess.getDefaultConstraintAccess().getConstraintsConstraintParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__PersonNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getPersonNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPersonalConstraintAccess().getPersonNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__ActivityNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getActivityNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getPersonalConstraintAccess().getActivityNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PersonalConstraint__ConstraintsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonalConstraintAccess().getConstraintsConstraintParserRuleCall_5_0()); }
	ruleConstraint{ after(grammarAccess.getPersonalConstraintAccess().getConstraintsConstraintParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConstraintNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getConstraintNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getConstraintAccess().getConstraintNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__FeatureNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getFeatureNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getConstraintAccess().getFeatureNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__JudgeFunAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getJudgeFunJudgeFunParserRuleCall_4_0()); }
	ruleJudgeFun{ after(grammarAccess.getConstraintAccess().getJudgeFunJudgeFunParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ThresholdAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getThresholdThresholdParserRuleCall_6_0()); }
	ruleThreshold{ after(grammarAccess.getConstraintAccess().getThresholdThresholdParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


