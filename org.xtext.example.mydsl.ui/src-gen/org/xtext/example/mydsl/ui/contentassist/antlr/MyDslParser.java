/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConstraintTypeAccess().getAlternatives(), "rule__ConstraintType__Alternatives");
					put(grammarAccess.getJudgeFunAccess().getAlternatives(), "rule__JudgeFun__Alternatives");
					put(grammarAccess.getJudgeFunAccess().getAlternatives_2_0(), "rule__JudgeFun__Alternatives_2_0");
					put(grammarAccess.getThresholdAccess().getAlternatives(), "rule__Threshold__Alternatives");
					put(grammarAccess.getThresholdAccess().getAlternatives_1_0(), "rule__Threshold__Alternatives_1_0");
					put(grammarAccess.getThresholdAccess().getAlternatives_1_4(), "rule__Threshold__Alternatives_1_4");
					put(grammarAccess.getFloatAccess().getAlternatives_0(), "rule__Float__Alternatives_0");
					put(grammarAccess.getFloatAccess().getAlternatives_1(), "rule__Float__Alternatives_1");
					put(grammarAccess.getDomainModelAccess().getGroup(), "rule__DomainModel__Group__0");
					put(grammarAccess.getDefaultConstraintAccess().getGroup(), "rule__DefaultConstraint__Group__0");
					put(grammarAccess.getPersonalConstraintAccess().getGroup(), "rule__PersonalConstraint__Group__0");
					put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getJudgeFunAccess().getGroup_2(), "rule__JudgeFun__Group_2__0");
					put(grammarAccess.getThresholdAccess().getGroup_1(), "rule__Threshold__Group_1__0");
					put(grammarAccess.getFloatAccess().getGroup(), "rule__Float__Group__0");
					put(grammarAccess.getFloatAccess().getGroup_1_0(), "rule__Float__Group_1_0__0");
					put(grammarAccess.getFloatAccess().getGroup_1_0_1(), "rule__Float__Group_1_0_1__0");
					put(grammarAccess.getFloatAccess().getGroup_1_1(), "rule__Float__Group_1_1__0");
					put(grammarAccess.getDomainModelAccess().getPackageNameAssignment_1(), "rule__DomainModel__PackageNameAssignment_1");
					put(grammarAccess.getDomainModelAccess().getElementsAssignment_4(), "rule__DomainModel__ElementsAssignment_4");
					put(grammarAccess.getConstraintTypeAccess().getDAssignment_0(), "rule__ConstraintType__DAssignment_0");
					put(grammarAccess.getConstraintTypeAccess().getPAssignment_1(), "rule__ConstraintType__PAssignment_1");
					put(grammarAccess.getDefaultConstraintAccess().getActivityNameAssignment_1(), "rule__DefaultConstraint__ActivityNameAssignment_1");
					put(grammarAccess.getDefaultConstraintAccess().getConstraintsAssignment_3(), "rule__DefaultConstraint__ConstraintsAssignment_3");
					put(grammarAccess.getPersonalConstraintAccess().getPersonNameAssignment_1(), "rule__PersonalConstraint__PersonNameAssignment_1");
					put(grammarAccess.getPersonalConstraintAccess().getActivityNameAssignment_3(), "rule__PersonalConstraint__ActivityNameAssignment_3");
					put(grammarAccess.getPersonalConstraintAccess().getConstraintsAssignment_5(), "rule__PersonalConstraint__ConstraintsAssignment_5");
					put(grammarAccess.getConstraintAccess().getConstraintNameAssignment_0(), "rule__Constraint__ConstraintNameAssignment_0");
					put(grammarAccess.getConstraintAccess().getFeatureNameAssignment_2(), "rule__Constraint__FeatureNameAssignment_2");
					put(grammarAccess.getConstraintAccess().getJudgeFunAssignment_4(), "rule__Constraint__JudgeFunAssignment_4");
					put(grammarAccess.getConstraintAccess().getThresholdAssignment_6(), "rule__Constraint__ThresholdAssignment_6");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleDomainModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
