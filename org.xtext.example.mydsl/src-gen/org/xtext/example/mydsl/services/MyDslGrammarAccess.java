/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DomainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIjsdfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsConstraintTypeParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////the DSL's elements describe default or personal constraints to specific activities
		//DomainModel:
		//	"package" packageName=QualifiedName "{" "ijsdf" elements+=ConstraintType* "}";
		public ParserRule getRule() { return rule; }

		//"package" packageName=QualifiedName "{" "ijsdf" elements+=ConstraintType* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_1_0() { return cPackageNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"ijsdf"
		public Keyword getIjsdfKeyword_3() { return cIjsdfKeyword_3; }

		//elements+=ConstraintType*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//ConstraintType
		public RuleCall getElementsConstraintTypeParserRuleCall_4_0() { return cElementsConstraintTypeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConstraintTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDDefaultConstraintParserRuleCall_0_0 = (RuleCall)cDAssignment_0.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPPersonalConstraintParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		
		////constraint type: d(default constraint), p(personal constraint)
		//ConstraintType:
		//	d=DefaultConstraint | p=PersonalConstraint;
		public ParserRule getRule() { return rule; }

		//d=DefaultConstraint | p=PersonalConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//d=DefaultConstraint
		public Assignment getDAssignment_0() { return cDAssignment_0; }

		//DefaultConstraint
		public RuleCall getDDefaultConstraintParserRuleCall_0_0() { return cDDefaultConstraintParserRuleCall_0_0; }

		//p=PersonalConstraint
		public Assignment getPAssignment_1() { return cPAssignment_1; }

		//PersonalConstraint
		public RuleCall getPPersonalConstraintParserRuleCall_1_0() { return cPPersonalConstraintParserRuleCall_1_0; }
	}

	public class DefaultConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActivityNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActivityNameIDTerminalRuleCall_1_0 = (RuleCall)cActivityNameAssignment_1.eContents().get(0);
		private final Keyword cConstraintKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		
		////default constraints, suitable for most people, for specific activity given by application developers
		//DefaultConstraint:
		//	"activity" activityName=ID "constraint" constraints+=Constraint*;
		public ParserRule getRule() { return rule; }

		//"activity" activityName=ID "constraint" constraints+=Constraint*
		public Group getGroup() { return cGroup; }

		//"activity"
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }

		//activityName=ID
		public Assignment getActivityNameAssignment_1() { return cActivityNameAssignment_1; }

		//ID
		public RuleCall getActivityNameIDTerminalRuleCall_1_0() { return cActivityNameIDTerminalRuleCall_1_0; }

		//"constraint"
		public Keyword getConstraintKeyword_2() { return cConstraintKeyword_2; }

		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_0() { return cConstraintsConstraintParserRuleCall_3_0; }
	}

	public class PersonalConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PersonalConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPersonNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPersonNameIDTerminalRuleCall_1_0 = (RuleCall)cPersonNameAssignment_1.eContents().get(0);
		private final Keyword cActivityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivityNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActivityNameIDTerminalRuleCall_3_0 = (RuleCall)cActivityNameAssignment_3.eContents().get(0);
		private final Keyword cConstraintKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_0 = (RuleCall)cConstraintsAssignment_5.eContents().get(0);
		
		////describing personal constraints for specific activity
		//PersonalConstraint:
		//	"person" personName=ID "activity" activityName=ID "constraint" constraints+=Constraint*;
		public ParserRule getRule() { return rule; }

		//"person" personName=ID "activity" activityName=ID "constraint" constraints+=Constraint*
		public Group getGroup() { return cGroup; }

		//"person"
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }

		//personName=ID
		public Assignment getPersonNameAssignment_1() { return cPersonNameAssignment_1; }

		//ID
		public RuleCall getPersonNameIDTerminalRuleCall_1_0() { return cPersonNameIDTerminalRuleCall_1_0; }

		//"activity"
		public Keyword getActivityKeyword_2() { return cActivityKeyword_2; }

		//activityName=ID
		public Assignment getActivityNameAssignment_3() { return cActivityNameAssignment_3; }

		//ID
		public RuleCall getActivityNameIDTerminalRuleCall_3_0() { return cActivityNameIDTerminalRuleCall_3_0; }

		//"constraint"
		public Keyword getConstraintKeyword_4() { return cConstraintKeyword_4; }

		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_5() { return cConstraintsAssignment_5; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_0() { return cConstraintsConstraintParserRuleCall_5_0; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstraintNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstraintNameIDTerminalRuleCall_0_0 = (RuleCall)cConstraintNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureNameIDTerminalRuleCall_2_0 = (RuleCall)cFeatureNameAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJudgeFunAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJudgeFunJudgeFunParserRuleCall_4_0 = (RuleCall)cJudgeFunAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThresholdAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThresholdThresholdParserRuleCall_6_0 = (RuleCall)cThresholdAssignment_6.eContents().get(0);
		
		////e.g. cons: lightIntesity, inRange, [50, 100]
		//Constraint:
		//	constraintName=ID ":" featureName=ID "," judgeFun=JudgeFun "," threshold=Threshold;
		public ParserRule getRule() { return rule; }

		//constraintName=ID ":" featureName=ID "," judgeFun=JudgeFun "," threshold=Threshold
		public Group getGroup() { return cGroup; }

		//constraintName=ID
		public Assignment getConstraintNameAssignment_0() { return cConstraintNameAssignment_0; }

		//ID
		public RuleCall getConstraintNameIDTerminalRuleCall_0_0() { return cConstraintNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//featureName=ID
		public Assignment getFeatureNameAssignment_2() { return cFeatureNameAssignment_2; }

		//ID
		public RuleCall getFeatureNameIDTerminalRuleCall_2_0() { return cFeatureNameIDTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//judgeFun=JudgeFun
		public Assignment getJudgeFunAssignment_4() { return cJudgeFunAssignment_4; }

		//JudgeFun
		public RuleCall getJudgeFunJudgeFunParserRuleCall_4_0() { return cJudgeFunJudgeFunParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//threshold=Threshold
		public Assignment getThresholdAssignment_6() { return cThresholdAssignment_6; }

		//Threshold
		public RuleCall getThresholdThresholdParserRuleCall_6_0() { return cThresholdThresholdParserRuleCall_6_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////qualified name for describing package name
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class JudgeFunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JudgeFun");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cInRangeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		////definition of judge function(<, >, <=, >=, =, inRange)
		//JudgeFun:
		//	"<" | ">" | ("<" | ">")? "=" | "inRange";
		public ParserRule getRule() { return rule; }

		//"<" | ">" | ("<" | ">")? "=" | "inRange"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//("<" | ">")? "="
		public Group getGroup_2() { return cGroup_2; }

		//("<" | ">")?
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0_0() { return cLessThanSignKeyword_2_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_0_1() { return cGreaterThanSignKeyword_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//"inRange"
		public Keyword getInRangeKeyword_3() { return cInRangeKeyword_3; }
	}

	public class ThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Threshold");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cFloatParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cFloatParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_4_0 = (Keyword)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		
		////definition of threshold for judge function(float, [float, float], (float, float), [float, float),(float, float])
		//Threshold:
		//	Float | ("[" | "(") Float "," Float (")" | "]");
		public ParserRule getRule() { return rule; }

		//Float | ("[" | "(") Float "," Float (")" | "]")
		public Alternatives getAlternatives() { return cAlternatives; }

		//Float
		public RuleCall getFloatParserRuleCall_0() { return cFloatParserRuleCall_0; }

		//("[" | "(") Float "," Float (")" | "]")
		public Group getGroup_1() { return cGroup_1; }

		//"[" | "("
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//Float
		public RuleCall getFloatParserRuleCall_1_1() { return cFloatParserRuleCall_1_1; }

		//","
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//Float
		public RuleCall getFloatParserRuleCall_1_3() { return cFloatParserRuleCall_1_3; }

		//")" | "]"
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4_0() { return cRightParenthesisKeyword_1_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4_1() { return cRightSquareBracketKeyword_1_4_1; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		////definition of floating-point number(INT is predefined in org.eclipse.xtext.common.Terminals) Float:
		//	("+" | "-")? (INT ("." INT)? | "." INT);
		public ParserRule getRule() { return rule; }

		//("+" | "-")? (INT ("." INT)? | "." INT)
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//INT ("." INT)? | "." INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//INT ("." INT)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//("." INT)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_1_0() { return cFullStopKeyword_1_0_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_1_1() { return cINTTerminalRuleCall_1_0_1_1; }

		//"." INT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
	}
	
	
	private DomainModelElements pDomainModel;
	private ConstraintTypeElements pConstraintType;
	private DefaultConstraintElements pDefaultConstraint;
	private PersonalConstraintElements pPersonalConstraint;
	private ConstraintElements pConstraint;
	private QualifiedNameElements pQualifiedName;
	private JudgeFunElements pJudgeFun;
	private ThresholdElements pThreshold;
	private FloatElements pFloat;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////the DSL's elements describe default or personal constraints to specific activities
	//DomainModel:
	//	"package" packageName=QualifiedName "{" "ijsdf" elements+=ConstraintType* "}";
	public DomainModelElements getDomainModelAccess() {
		return (pDomainModel != null) ? pDomainModel : (pDomainModel = new DomainModelElements());
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}

	////constraint type: d(default constraint), p(personal constraint)
	//ConstraintType:
	//	d=DefaultConstraint | p=PersonalConstraint;
	public ConstraintTypeElements getConstraintTypeAccess() {
		return (pConstraintType != null) ? pConstraintType : (pConstraintType = new ConstraintTypeElements());
	}
	
	public ParserRule getConstraintTypeRule() {
		return getConstraintTypeAccess().getRule();
	}

	////default constraints, suitable for most people, for specific activity given by application developers
	//DefaultConstraint:
	//	"activity" activityName=ID "constraint" constraints+=Constraint*;
	public DefaultConstraintElements getDefaultConstraintAccess() {
		return (pDefaultConstraint != null) ? pDefaultConstraint : (pDefaultConstraint = new DefaultConstraintElements());
	}
	
	public ParserRule getDefaultConstraintRule() {
		return getDefaultConstraintAccess().getRule();
	}

	////describing personal constraints for specific activity
	//PersonalConstraint:
	//	"person" personName=ID "activity" activityName=ID "constraint" constraints+=Constraint*;
	public PersonalConstraintElements getPersonalConstraintAccess() {
		return (pPersonalConstraint != null) ? pPersonalConstraint : (pPersonalConstraint = new PersonalConstraintElements());
	}
	
	public ParserRule getPersonalConstraintRule() {
		return getPersonalConstraintAccess().getRule();
	}

	////e.g. cons: lightIntesity, inRange, [50, 100]
	//Constraint:
	//	constraintName=ID ":" featureName=ID "," judgeFun=JudgeFun "," threshold=Threshold;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	////qualified name for describing package name
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	////definition of judge function(<, >, <=, >=, =, inRange)
	//JudgeFun:
	//	"<" | ">" | ("<" | ">")? "=" | "inRange";
	public JudgeFunElements getJudgeFunAccess() {
		return (pJudgeFun != null) ? pJudgeFun : (pJudgeFun = new JudgeFunElements());
	}
	
	public ParserRule getJudgeFunRule() {
		return getJudgeFunAccess().getRule();
	}

	////definition of threshold for judge function(float, [float, float], (float, float), [float, float),(float, float])
	//Threshold:
	//	Float | ("[" | "(") Float "," Float (")" | "]");
	public ThresholdElements getThresholdAccess() {
		return (pThreshold != null) ? pThreshold : (pThreshold = new ThresholdElements());
	}
	
	public ParserRule getThresholdRule() {
		return getThresholdAccess().getRule();
	}

	////definition of floating-point number(INT is predefined in org.eclipse.xtext.common.Terminals) Float:
	//	("+" | "-")? (INT ("." INT)? | "." INT);
	public FloatElements getFloatAccess() {
		return (pFloat != null) ? pFloat : (pFloat = new FloatElements());
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
