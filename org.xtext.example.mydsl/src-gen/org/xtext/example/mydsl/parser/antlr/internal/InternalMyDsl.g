/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	 iv_ruleDomainModel=ruleDomainModel 
	 { $current=$iv_ruleDomainModel.current; } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDomainModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainModelAccess().getPackageNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_packageName_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainModelRule());
	        }
       		set(
       			$current, 
       			"packageName",
        		lv_packageName_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDomainModelAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='ijsdf' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDomainModelAccess().getIjsdfKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainModelAccess().getElementsConstraintTypeParserRuleCall_4_0()); 
	    }
		lv_elements_4_0=ruleConstraintType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"ConstraintType");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDomainModelAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleConstraintType
entryRuleConstraintType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintTypeRule()); }
	 iv_ruleConstraintType=ruleConstraintType 
	 { $current=$iv_ruleConstraintType.current; } 
	 EOF 
;

// Rule ConstraintType
ruleConstraintType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintTypeAccess().getDDefaultConstraintParserRuleCall_0_0()); 
	    }
		lv_d_0_0=ruleDefaultConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintTypeRule());
	        }
       		set(
       			$current, 
       			"d",
        		lv_d_0_0, 
        		"DefaultConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintTypeAccess().getPPersonalConstraintParserRuleCall_1_0()); 
	    }
		lv_p_1_0=rulePersonalConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintTypeRule());
	        }
       		set(
       			$current, 
       			"p",
        		lv_p_1_0, 
        		"PersonalConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefaultConstraint
entryRuleDefaultConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultConstraintRule()); }
	 iv_ruleDefaultConstraint=ruleDefaultConstraint 
	 { $current=$iv_ruleDefaultConstraint.current; } 
	 EOF 
;

// Rule DefaultConstraint
ruleDefaultConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='activity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultConstraintAccess().getActivityKeyword_0());
    }
(
(
		lv_activityName_1_0=RULE_ID
		{
			newLeafNode(lv_activityName_1_0, grammarAccess.getDefaultConstraintAccess().getActivityNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefaultConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"activityName",
        		lv_activityName_1_0, 
        		"ID");
	    }

)
)	otherlv_2='constraint' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefaultConstraintAccess().getConstraintKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultConstraintAccess().getConstraintsConstraintParserRuleCall_3_0()); 
	    }
		lv_constraints_3_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultConstraintRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_3_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePersonalConstraint
entryRulePersonalConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonalConstraintRule()); }
	 iv_rulePersonalConstraint=rulePersonalConstraint 
	 { $current=$iv_rulePersonalConstraint.current; } 
	 EOF 
;

// Rule PersonalConstraint
rulePersonalConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='person' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPersonalConstraintAccess().getPersonKeyword_0());
    }
(
(
		lv_personName_1_0=RULE_ID
		{
			newLeafNode(lv_personName_1_0, grammarAccess.getPersonalConstraintAccess().getPersonNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonalConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"personName",
        		lv_personName_1_0, 
        		"ID");
	    }

)
)	otherlv_2='activity' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPersonalConstraintAccess().getActivityKeyword_2());
    }
(
(
		lv_activityName_3_0=RULE_ID
		{
			newLeafNode(lv_activityName_3_0, grammarAccess.getPersonalConstraintAccess().getActivityNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonalConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"activityName",
        		lv_activityName_3_0, 
        		"ID");
	    }

)
)	otherlv_4='constraint' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPersonalConstraintAccess().getConstraintKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonalConstraintAccess().getConstraintsConstraintParserRuleCall_5_0()); 
	    }
		lv_constraints_5_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonalConstraintRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_5_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_constraintName_0_0=RULE_ID
		{
			newLeafNode(lv_constraintName_0_0, grammarAccess.getConstraintAccess().getConstraintNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constraintName",
        		lv_constraintName_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getColonKeyword_1());
    }
(
(
		lv_featureName_2_0=RULE_ID
		{
			newLeafNode(lv_featureName_2_0, grammarAccess.getConstraintAccess().getFeatureNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"featureName",
        		lv_featureName_2_0, 
        		"ID");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getJudgeFunJudgeFunParserRuleCall_4_0()); 
	    }
		lv_judgeFun_4_0=ruleJudgeFun		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"judgeFun",
        		lv_judgeFun_4_0, 
        		"JudgeFun");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstraintAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getThresholdThresholdParserRuleCall_6_0()); 
	    }
		lv_threshold_6_0=ruleThreshold		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"threshold",
        		lv_threshold_6_0, 
        		"Threshold");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleJudgeFun
entryRuleJudgeFun returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJudgeFunRule()); } 
	 iv_ruleJudgeFun=ruleJudgeFun 
	 { $current=$iv_ruleJudgeFun.current.getText(); }  
	 EOF 
;

// Rule JudgeFun
ruleJudgeFun returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJudgeFunAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJudgeFunAccess().getGreaterThanSignKeyword_1()); 
    }

    |((
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJudgeFunAccess().getLessThanSignKeyword_2_0_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJudgeFunAccess().getGreaterThanSignKeyword_2_0_1()); 
    }
)?
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJudgeFunAccess().getEqualsSignKeyword_2_1()); 
    }
)
    |
	kw='inRange' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJudgeFunAccess().getInRangeKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleThreshold
entryRuleThreshold returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getThresholdRule()); } 
	 iv_ruleThreshold=ruleThreshold 
	 { $current=$iv_ruleThreshold.current.getText(); }  
	 EOF 
;

// Rule Threshold
ruleThreshold returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getThresholdAccess().getFloatParserRuleCall_0()); 
    }
    this_Float_0=ruleFloat    {
		$current.merge(this_Float_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |((
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getThresholdAccess().getLeftSquareBracketKeyword_1_0_0()); 
    }

    |
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getThresholdAccess().getLeftParenthesisKeyword_1_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getThresholdAccess().getFloatParserRuleCall_1_1()); 
    }
    this_Float_3=ruleFloat    {
		$current.merge(this_Float_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getThresholdAccess().getCommaKeyword_1_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getThresholdAccess().getFloatParserRuleCall_1_3()); 
    }
    this_Float_5=ruleFloat    {
		$current.merge(this_Float_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getThresholdAccess().getRightParenthesisKeyword_1_4_0()); 
    }

    |
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getThresholdAccess().getRightSquareBracketKeyword_1_4_1()); 
    }
)))
    ;





// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatRule()); } 
	 iv_ruleFloat=ruleFloat 
	 { $current=$iv_ruleFloat.current.getText(); }  
	 EOF 
;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getHyphenMinusKeyword_0_1()); 
    }
)?((    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_0_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1_0_1_0()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_0_1_1()); 
    }
)?)
    |(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1_1_0()); 
    }
    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    newLeafNode(this_INT_6, grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1_1()); 
    }
)))
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


